function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end


function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
	-- print("Update")
	-- print(tilemap.get_bounds("/map#tiles"))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- { 
		-- 	["normal"] = vmath.vector3(0, 1, 0),
		-- 	["position"] = vmath.vector3(695.55926513672, 412.90823364258, 0),
		-- 	["other_position"] = vmath.vector3(0, 0, 0),
		-- 	["own_group"] = hash: [hero],
		-- 	["relative_velocity"] = vmath.vector3(0, 0, 0),
		-- 	["other_group"] = hash: [blocker],
		-- 	["other_id"] = hash: [/collection0/map],
		-- 	["other_mass"] = 0,
		-- 	["group"] = hash: [blocker],
		-- 	["applied_impulse"] = 0,
		-- 	["distance"] = 0,
		-- 	["life_time"] = 0,
		-- 	["mass"] = 0,
		-- } 

		local x = message.position.x + 32;
		local y = message.position.y + 32

		if (message.normal.x > 0) then
			x = x + 1
		elseif (message.normal.x < 0) then
			x = x - 1
		end
		
		if (message.normal.y > 0) then
			y = y + 1
		elseif (message.normal.y < 0) then
			y = y - 1
		end

		y = math.floor(y / 32)
		x = math.floor(x / 32)

		local tile_id = tilemap.get_tile("map#tiles", "level1", x, y)
		local tiles = msg.url(map, nil, "tiles")

		local position = vmath.vector3((x * 32) - 16, (y * 32) - 16, 1.0);
		msg.post("/tilebox#tilebox1", "move", { position = position })
		msg.post(message.other_id, "collision_tile", { 
			position = position, 
			tile_id = tile_id 
		})
	elseif message_id == hash("trigger_response") then
		print("tilemap - trigger_response")
		pprint(message)
	elseif message_id == hash("collision_response") then
		print("tilemap - collision_response")
		pprint(message)
		local url = msg.url(nil, message.other_id, "script")
		print(url)
		local anim = go.property(url, "anim")
		local axe = go.property(url, "axe")
		local input = go.property(url, "input")
		local pp = go.property(url, "pp")
		local velocity = go.property(url, "velocity")
		local facing = go.property(url, "facing")
		local correction = go.property(url, "correction")
		
		print("anim", anim)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
